{"reason":"compiler-artifact","package_id":"path+file:///scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust#0.1.0","manifest_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rust","src_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/target/debug/deps/librust-e70bbbc094327dd8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-message","package_id":"path+file:///scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust#0.1.0","manifest_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"humaneval_68_pluck","src_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/src/bin/humaneval_68_pluck.rs","edition":"2018","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/bin/humaneval_68_pluck.rs:32:30\n   |\n32 |         if x % 2 == 0 && x < min_val {\n   |                          -   ^^^^^^^ expected `isize`, found `i64`\n   |                          |\n   |                          expected because this is `isize`\n   |\nhelp: you can convert an `i64` to an `isize` and panic if the converted value doesn't fit\n   |\n32 |         if x % 2 == 0 && x < min_val.try_into().unwrap() {\n   |                                     ++++++++++++++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"you can convert an `i64` to an `isize` and panic if the converted value doesn't fit","rendered":null,"spans":[{"byte_end":1272,"byte_start":1272,"column_end":37,"column_start":37,"expansion":null,"file_name":"src/bin/humaneval_68_pluck.rs","is_primary":true,"label":null,"line_end":32,"line_start":32,"suggested_replacement":".try_into().unwrap()","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":37,"highlight_start":37,"text":"        if x % 2 == 0 && x < min_val {"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":1272,"byte_start":1265,"column_end":37,"column_start":30,"expansion":null,"file_name":"src/bin/humaneval_68_pluck.rs","is_primary":true,"label":"expected `isize`, found `i64`","line_end":32,"line_start":32,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":37,"highlight_start":30,"text":"        if x % 2 == 0 && x < min_val {"}]},{"byte_end":1262,"byte_start":1261,"column_end":27,"column_start":26,"expansion":null,"file_name":"src/bin/humaneval_68_pluck.rs","is_primary":false,"label":"expected because this is `isize`","line_end":32,"line_start":32,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":26,"text":"        if x % 2 == 0 && x < min_val {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust#0.1.0","manifest_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"humaneval_68_pluck","src_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/src/bin/humaneval_68_pluck.rs","edition":"2018","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/bin/humaneval_68_pluck.rs:33:23\n   |\n29 |     let mut min_val = i64::MAX;\n   |                       -------- expected due to this value\n...\n33 |             min_val = x;\n   |                       ^ expected `i64`, found `isize`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":1298,"byte_start":1297,"column_end":24,"column_start":23,"expansion":null,"file_name":"src/bin/humaneval_68_pluck.rs","is_primary":true,"label":"expected `i64`, found `isize`","line_end":33,"line_start":33,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":23,"text":"            min_val = x;"}]},{"byte_end":1164,"byte_start":1156,"column_end":31,"column_start":23,"expansion":null,"file_name":"src/bin/humaneval_68_pluck.rs","is_primary":false,"label":"expected due to this value","line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":23,"text":"    let mut min_val = i64::MAX;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust#0.1.0","manifest_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"humaneval_68_pluck","src_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/src/bin/humaneval_68_pluck.rs","edition":"2018","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> src/bin/humaneval_68_pluck.rs:30:23\n   |\n30 |     let mut min_idx = -1;\n   |                       ^^ the trait `Neg` is not implemented for `usize`\n   |\n   = help: the following other types implement trait `Neg`:\n             &f128\n             &f16\n             &f32\n             &f64\n             &i128\n             &i16\n             &i32\n             &i64\n           and 12 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Neg`:\n  &f128\n  &f16\n  &f32\n  &f64\n  &i128\n  &i16\n  &i32\n  &i64\nand 12 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `usize: Neg` is not satisfied","spans":[{"byte_end":1190,"byte_start":1188,"column_end":25,"column_start":23,"expansion":null,"file_name":"src/bin/humaneval_68_pluck.rs","is_primary":true,"label":"the trait `Neg` is not implemented for `usize`","line_end":30,"line_start":30,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":23,"text":"    let mut min_idx = -1;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust#0.1.0","manifest_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"humaneval_68_pluck","src_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/src/bin/humaneval_68_pluck.rs","edition":"2018","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0600]: cannot apply unary operator `-` to type `usize`\n  --> src/bin/humaneval_68_pluck.rs:37:19\n   |\n37 |     if min_idx == -1 {\n   |                   ^^ cannot apply unary operator `-`\n   |\n   = note: unsigned values cannot be negated\nhelp: you may have meant the maximum value of `usize`\n   |\n37 -     if min_idx == -1 {\n37 +     if min_idx == usize::MAX {\n   |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"unsigned values cannot be negated","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"you may have meant the maximum value of `usize`","rendered":null,"spans":[{"byte_end":1361,"byte_start":1359,"column_end":21,"column_start":19,"expansion":null,"file_name":"src/bin/humaneval_68_pluck.rs","is_primary":true,"label":null,"line_end":37,"line_start":37,"suggested_replacement":"usize::MAX","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":21,"highlight_start":19,"text":"    if min_idx == -1 {"}]}]}],"code":{"code":"E0600","explanation":"An unary operator was used on a type which doesn't implement it.\n\nErroneous code example:\n\n```compile_fail,E0600\nenum Question {\n    Yes,\n    No,\n}\n\n!Question::Yes; // error: cannot apply unary operator `!` to type `Question`\n```\n\nIn this case, `Question` would need to implement the `std::ops::Not` trait in\norder to be able to use `!` on it. Let's implement it:\n\n```\nuse std::ops::Not;\n\nenum Question {\n    Yes,\n    No,\n}\n\n// We implement the `Not` trait on the enum.\nimpl Not for Question {\n    type Output = bool;\n\n    fn not(self) -> bool {\n        match self {\n            Question::Yes => false, // If the `Answer` is `Yes`, then it\n                                    // returns false.\n            Question::No => true, // And here we do the opposite.\n        }\n    }\n}\n\nassert_eq!(!Question::Yes, false);\nassert_eq!(!Question::No, true);\n```\n"},"level":"error","message":"cannot apply unary operator `-` to type `usize`","spans":[{"byte_end":1361,"byte_start":1359,"column_end":21,"column_start":19,"expansion":null,"file_name":"src/bin/humaneval_68_pluck.rs","is_primary":true,"label":"cannot apply unary operator `-`","line_end":37,"line_start":37,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":19,"text":"    if min_idx == -1 {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust#0.1.0","manifest_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"humaneval_68_pluck","src_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/src/bin/humaneval_68_pluck.rs","edition":"2018","doc":true,"doctest":false,"test":true},"message":{"rendered":"Some errors have detailed explanations: E0277, E0308, E0600.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"Some errors have detailed explanations: E0277, E0308, E0600.","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust#0.1.0","manifest_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"humaneval_68_pluck","src_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/src/bin/humaneval_68_pluck.rs","edition":"2018","doc":true,"doctest":false,"test":true},"message":{"rendered":"For more information about an error, try `rustc --explain E0277`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about an error, try `rustc --explain E0277`.","spans":[]}}
{"reason":"build-finished","success":false}
