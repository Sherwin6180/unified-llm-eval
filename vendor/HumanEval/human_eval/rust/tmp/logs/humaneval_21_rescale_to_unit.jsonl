{"reason":"compiler-artifact","package_id":"path+file:///scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust#0.1.0","manifest_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rust","src_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/target/debug/deps/librust-e70bbbc094327dd8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-message","package_id":"path+file:///scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust#0.1.0","manifest_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"humaneval_21_rescale_to_unit","src_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/src/bin/humaneval_21_rescale_to_unit.rs","edition":"2018","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> src/bin/humaneval_21_rescale_to_unit.rs:8:31\n  |\n8 |     let min = *numbers.iter().min().unwrap();\n  |                               ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = help: the following other types implement trait `Ord`:\n            i128\n            i16\n            i32\n            i64\n            i8\n            isize\n            u128\n            u16\n          and 4 others\n  = note: required for `&f64` to implement `Ord`\nnote: required by a bound in `std::iter::Iterator::min`\n --> /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/iter/traits/iterator.rs:3198:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Ord`:\n  i128\n  i16\n  i32\n  i64\n  i8\n  isize\n  u128\n  u16\nand 4 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `&f64` to implement `Ord`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `std::iter::Iterator::min`","rendered":null,"spans":[{"byte_end":108602,"byte_start":108512,"column_end":25,"column_start":5,"expansion":null,"file_name":"/rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/iter/traits/iterator.rs","is_primary":true,"label":null,"line_end":3201,"line_start":3198,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `f64: Ord` is not satisfied","spans":[{"byte_end":353,"byte_start":350,"column_end":34,"column_start":31,"expansion":null,"file_name":"src/bin/humaneval_21_rescale_to_unit.rs","is_primary":true,"label":"the trait `Ord` is not implemented for `f64`","line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":31,"text":"    let min = *numbers.iter().min().unwrap();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust#0.1.0","manifest_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"humaneval_21_rescale_to_unit","src_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/src/bin/humaneval_21_rescale_to_unit.rs","edition":"2018","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> src/bin/humaneval_21_rescale_to_unit.rs:9:31\n  |\n9 |     let max = *numbers.iter().max().unwrap();\n  |                               ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = help: the following other types implement trait `Ord`:\n            i128\n            i16\n            i32\n            i64\n            i8\n            isize\n            u128\n            u16\n          and 4 others\n  = note: required for `&f64` to implement `Ord`\nnote: required by a bound in `std::iter::Iterator::max`\n --> /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/iter/traits/iterator.rs:3162:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Ord`:\n  i128\n  i16\n  i32\n  i64\n  i8\n  isize\n  u128\n  u16\nand 4 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `&f64` to implement `Ord`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `std::iter::Iterator::max`","rendered":null,"spans":[{"byte_end":107621,"byte_start":107531,"column_end":25,"column_start":5,"expansion":null,"file_name":"/rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/iter/traits/iterator.rs","is_primary":true,"label":null,"line_end":3165,"line_start":3162,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `f64: Ord` is not satisfied","spans":[{"byte_end":399,"byte_start":396,"column_end":34,"column_start":31,"expansion":null,"file_name":"src/bin/humaneval_21_rescale_to_unit.rs","is_primary":true,"label":"the trait `Ord` is not implemented for `f64`","line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":31,"text":"    let max = *numbers.iter().max().unwrap();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust#0.1.0","manifest_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"humaneval_21_rescale_to_unit","src_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/src/bin/humaneval_21_rescale_to_unit.rs","edition":"2018","doc":true,"doctest":false,"test":true},"message":{"rendered":"For more information about this error, try `rustc --explain E0277`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about this error, try `rustc --explain E0277`.","spans":[]}}
{"reason":"build-finished","success":false}
