{"reason":"compiler-artifact","package_id":"path+file:///scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust#0.1.0","manifest_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rust","src_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/target/debug/deps/librust-e70bbbc094327dd8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-message","package_id":"path+file:///scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust#0.1.0","manifest_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"humaneval_101_words_string","src_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/src/bin/humaneval_101_words_string.rs","edition":"2018","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: a value of type `Vec<String>` cannot be built from an iterator over elements of type `&str`\n  --> src/bin/humaneval_101_words_string.rs:12:43\n   |\n12 |     words.filter(|word| !word.is_empty()).collect()}\n   |                                           ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n   |\n   = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n           but trait `FromIterator<String>` is implemented for it\n   = help: for that trait implementation, expected `String`, found `&str`\nnote: the method call chain might not have had the expected associated types\n  --> src/bin/humaneval_101_words_string.rs:11:23\n   |\n11 |     let mut words = s.split(|c: char| c == ' ' || c == ',');\n   |                     - ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Iterator::Item` is `&str` here\n   |                     |\n   |                     this expression has type `String`\n12 |     words.filter(|word| !word.is_empty()).collect()}\n   |           ------------------------------- `Iterator::Item` remains `&str` here\nnote: required by a bound in `collect`\n  --> /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/iter/traits/iterator.rs:2014:5\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `FromIterator<&str>` is not implemented for `Vec<String>`\nbut trait `FromIterator<String>` is implemented for it","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"for that trait implementation, expected `String`, found `&str`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the method call chain might not have had the expected associated types","rendered":null,"spans":[{"byte_end":618,"byte_start":617,"column_end":22,"column_start":21,"expansion":null,"file_name":"src/bin/humaneval_101_words_string.rs","is_primary":false,"label":"this expression has type `String`","line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":21,"text":"    let mut words = s.split(|c: char| c == ' ' || c == ',');"}]},{"byte_end":699,"byte_start":668,"column_end":42,"column_start":11,"expansion":null,"file_name":"src/bin/humaneval_101_words_string.rs","is_primary":false,"label":"`Iterator::Item` remains `&str` here","line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":11,"text":"    words.filter(|word| !word.is_empty()).collect()}"}]},{"byte_end":656,"byte_start":619,"column_end":60,"column_start":23,"expansion":null,"file_name":"src/bin/humaneval_101_words_string.rs","is_primary":true,"label":"`Iterator::Item` is `&str` here","line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":23,"text":"    let mut words = s.split(|c: char| c == ' ' || c == ',');"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `collect`","rendered":null,"spans":[{"byte_end":68001,"byte_start":67920,"column_end":21,"column_start":5,"expansion":null,"file_name":"/rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/iter/traits/iterator.rs","is_primary":true,"label":null,"line_end":2016,"line_start":2014,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"a value of type `Vec<String>` cannot be built from an iterator over elements of type `&str`","spans":[{"byte_end":707,"byte_start":700,"column_end":50,"column_start":43,"expansion":null,"file_name":"src/bin/humaneval_101_words_string.rs","is_primary":true,"label":"value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`","line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":43,"text":"    words.filter(|word| !word.is_empty()).collect()}"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust#0.1.0","manifest_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"humaneval_101_words_string","src_path":"/scratch/shared_dir/xinyu/workdir/unified-llm-eval/vendor/HumanEval/human_eval/rust/src/bin/humaneval_101_words_string.rs","edition":"2018","doc":true,"doctest":false,"test":true},"message":{"rendered":"For more information about this error, try `rustc --explain E0277`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about this error, try `rustc --explain E0277`.","spans":[]}}
{"reason":"build-finished","success":false}
