{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/bin/humaneval_11_string_xor.rs","byte_start":319,"byte_end":321,"line_start":9,"line_end":9,"column_start":10,"column_end":12,"is_primary":true,"text":[{"text":"    for (&x, &y) in a.chars().zip(b.chars()) {","highlight_start":10,"highlight_end":12}],"label":"expected `char`, found `&_`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/bin/humaneval_11_string_xor.rs","byte_start":330,"byte_end":354,"line_start":9,"line_end":9,"column_start":21,"column_end":45,"is_primary":false,"text":[{"text":"    for (&x, &y) in a.chars().zip(b.chars()) {","highlight_start":21,"highlight_end":45}],"label":"this is an iterator with items of type `(char, char)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/bin/humaneval_11_string_xor.rs","byte_start":330,"byte_end":354,"line_start":9,"line_end":9,"column_start":21,"column_end":45,"is_primary":false,"text":[{"text":"    for (&x, &y) in a.chars().zip(b.chars()) {","highlight_start":21,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src/bin/humaneval_11_string_xor.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"  expected type `char`\nfound reference `&_`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider removing `&` from the pattern","code":null,"level":"help","spans":[{"file_name":"src/bin/humaneval_11_string_xor.rs","byte_start":319,"byte_end":320,"line_start":9,"line_end":9,"column_start":10,"column_end":11,"is_primary":true,"text":[{"text":"    for (&x, &y) in a.chars().zip(b.chars()) {","highlight_start":10,"highlight_end":11}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/humaneval_11_string_xor.rs:9:10\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    for (&x, &y) in a.chars().zip(b.chars()) {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is an iterator with items of type `(char, char)`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `char`, found `&_`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m:   expected type `\u001b[0m\u001b[0m\u001b[1m\u001b[35mchar\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m          found reference `\u001b[0m\u001b[0m\u001b[1m\u001b[35m&_\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider removing `&` from the pattern\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    for (\u001b[0m\u001b[0m\u001b[38;5;9m&\u001b[0m\u001b[0mx, &y) in a.chars().zip(b.chars()) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    for (x, &y) in a.chars().zip(b.chars()) {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/bin/humaneval_11_string_xor.rs","byte_start":323,"byte_end":325,"line_start":9,"line_end":9,"column_start":14,"column_end":16,"is_primary":true,"text":[{"text":"    for (&x, &y) in a.chars().zip(b.chars()) {","highlight_start":14,"highlight_end":16}],"label":"expected `char`, found `&_`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/bin/humaneval_11_string_xor.rs","byte_start":330,"byte_end":354,"line_start":9,"line_end":9,"column_start":21,"column_end":45,"is_primary":false,"text":[{"text":"    for (&x, &y) in a.chars().zip(b.chars()) {","highlight_start":21,"highlight_end":45}],"label":"this is an iterator with items of type `(char, char)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/bin/humaneval_11_string_xor.rs","byte_start":330,"byte_end":354,"line_start":9,"line_end":9,"column_start":21,"column_end":45,"is_primary":false,"text":[{"text":"    for (&x, &y) in a.chars().zip(b.chars()) {","highlight_start":21,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src/bin/humaneval_11_string_xor.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"  expected type `char`\nfound reference `&_`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider removing `&` from the pattern","code":null,"level":"help","spans":[{"file_name":"src/bin/humaneval_11_string_xor.rs","byte_start":323,"byte_end":324,"line_start":9,"line_end":9,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"    for (&x, &y) in a.chars().zip(b.chars()) {","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/humaneval_11_string_xor.rs:9:14\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    for (&x, &y) in a.chars().zip(b.chars()) {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is an iterator with items of type `(char, char)`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `char`, found `&_`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m:   expected type `\u001b[0m\u001b[0m\u001b[1m\u001b[35mchar\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m          found reference `\u001b[0m\u001b[0m\u001b[1m\u001b[35m&_\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider removing `&` from the pattern\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    for (&x, \u001b[0m\u001b[0m\u001b[38;5;9m&\u001b[0m\u001b[0my) in a.chars().zip(b.chars()) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    for (&x, y) in a.chars().zip(b.chars()) {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0308`.\u001b[0m\n"}
